services:
  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    ports:
      - 3100:3100
    volumes:
      - ./loki.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - vnet

  promtail:
    image: grafana/promtail:3.0.0
    container_name: promtail
    volumes:
      - ./promptail.yaml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    restart: unless-stopped
    networks:
      - vnet

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    env_file: .env
    ports:
      - 3000:3000
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    restart: unless-stopped
    networks:
      - vnet
    depends_on:
      ticket_db:
        condition: service_healthy

  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - "8020"
      - --scheme
      - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.31.2
    container_name: weaviate
    hostname: weaviate
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: on-failure:0
    ports:
      - 8020:8020
      - 50051:50051
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      ENABLE_API_BASED_MODULES: "true"
      RAFT_ENABLE_ONE_NODE_RECOVERY: "true"
      AUTOSCHEMA_ENABLED: "false"
      CLUSTER_HOSTNAME: node1
    networks:
      - vnet

  text2vec_service:
    build:
      context: ../services/text2vec_service
      dockerfile: Dockerfile
    env_file: ../services/text2vec_service/.env
    container_name: ${TEXT2VEC_CONTAINER_NAME}
    command: ["python", "app/serve_text2vec.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 5s
      timeout: 2s
      retries: 1000
      start_period: 60s
    restart: unless-stopped
    labels:
      - "logging=promtail"
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    networks:
      - vnet

  vecdb_service:
    build:
      context: ../services/vecdb_service
      dockerfile: Dockerfile
    env_file: ../services/vecdb_service/.env
    container_name: ${VECDB_CONTAINER_NAME}
    command: ["python", "app/main.py"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${VECDB_PORT}/health"]
      interval: 5s
      timeout: 2s
      retries: 1000
      start_period: 60s
    labels:
      - "logging=promtail"
    depends_on:
      text2vec_service:
        condition: service_healthy
    networks:
      - vnet

  ticket_db:
    image: postgres:17
    container_name: ${POSTGRES_CONTAINER_NAME}
    restart: always
    env_file: .env
    networks:
      - vnet
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./ticketdb_init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 0s

  ollama:
    image: ollama/ollama:latest
    container_name: ${OLLAMA_CONTAINER_NAME}
    env_file: .env
    runtime: nvidia
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - ollama:/root/.ollama
      - ./run_ollama.sh:/run_ollama.sh:ro
    restart: unless-stopped
    entrypoint: ["/bin/sh", "/run_ollama.sh"]
    networks:
      - vnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5

  chat_service:
    build:
      context: ../services/chat_service
      dockerfile: Dockerfile
    env_file: ../services/chat_service/.env
    container_name: ${CHAT_CONTAINER_NAME}
    command: ["python", "app/main.py"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${CHAT_APP_PORT}/health"]
      interval: 5s
      timeout: 2s
      retries: 1000
      start_period: 60s
    labels:
      - "logging=promtail"
    depends_on:
      text2vec_service:
        condition: service_healthy
      ticket_db:
        condition: service_healthy
      vecdb_service:
        condition: service_healthy
    networks:
      - vnet

  media2text_service:
    build:
      context: ../services/media2text_service
      dockerfile: Dockerfile
    env_file: ../services/media2text_service/.env
    container_name: ${MEDIA2TEXT_CONTAINER_NAME}
    command: ["python", "app/serve_m2t.py"]
    restart: unless-stopped
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MEDIA2TEXT_PORT}/health"]
      interval: 5s
      timeout: 2s
      retries: 1000
      start_period: 60s
    labels:
      - "logging=promtail"
    depends_on:
      text2vec_service:
        condition: service_healthy
      ticket_db:
        condition: service_healthy
      vecdb_service:
        condition: service_healthy
    networks:
      - vnet

  workflow_manager:
    build:
      context: ../services/workflow_manager
      dockerfile: Dockerfile
    env_file: ../services/workflow_manager/.env
    container_name: ${WORKFLOW_MANAGER_CONTAINER_NAME}
    command: ["python", "app/main.py"]
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${WORKFLOW_MANAGER_APP_PORT}/health",
        ]
      interval: 5s
      timeout: 2s
      retries: 1000
      start_period: 60s
    labels:
      - "logging=promtail"
    depends_on:
      media2text_service:
        condition: service_healthy
      chat_service:
        condition: service_healthy
    networks:
      - vnet

networks:
  vnet:

volumes:
  ollama:
  db_data:
  grafana-data:
  weaviate_data:
