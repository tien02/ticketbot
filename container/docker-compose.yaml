services:
  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    ports:
      - 3100:3100
    volumes:
      - ./loki.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - vnet

  promtail:
    image: grafana/promtail:3.0.0
    container_name: promtail
    volumes:
      - ./promptail.yaml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    restart: unless-stopped
    networks:
      - vnet

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    env_file: ../.env
    ports:
      - 3000:3000
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    restart: unless-stopped
    networks:
      - vnet
    depends_on:
      ticket_db:
        condition: service_healthy

  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - "8020"
      - --scheme
      - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.31.2
    container_name: weaviate
    hostname: weaviate
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: on-failure:0
    ports:
      - 8020:8020
      - 50051:50051
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      ENABLE_API_BASED_MODULES: "true"
      RAFT_ENABLE_ONE_NODE_RECOVERY: "true"
      AUTOSCHEMA_ENABLED: "false"
      CLUSTER_HOSTNAME: node1
    networks:
      - vnet

  text2vec_service:
    build:
      context: ../services/text2vec_service
      dockerfile: Dockerfile
    env_file: ../services/text2vec_service/.env
    container_name: text2vec_service
    command: ["python", "app/serve_text2vec.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 5s
      timeout: 2s
      retries: 1000
      start_period: 60s
    restart: unless-stopped
    labels:
      - "logging=promtail"
    ports:
      - 8010:8010
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    networks:
      - vnet

  vecdb_service:
    build:
      context: ../services/vecdb_service
      dockerfile: Dockerfile
    env_file: ../services/vecdb_service/.env
    container_name: vecdb_service
    command: ["python", "app/main.py"]
    restart: unless-stopped
    ports:
      - 8024:8024
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8024/health"]
      interval: 5s
      timeout: 2s
      retries: 1000
      start_period: 60s
    labels:
      - "logging=promtail"
    depends_on:
      text2vec_service:
        condition: service_healthy
    networks:
      - vnet

networks:
  vnet:

volumes:
  grafana-data:
  weaviate_data:
